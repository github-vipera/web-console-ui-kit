/**
 * Motif Platform Service API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * Contact: info@vipera.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { SystemCategoriesList } from '../model/systemCategoriesList';
import { SystemCategory } from '../model/systemCategory';
import { SystemMessageUpdate } from '../model/systemMessageUpdate';
import { SystemMessagesList } from '../model/systemMessagesList';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SystemService {

    protected basePath = 'http://localhost:8080/rest/v2';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates a system category
     * Creates a system category
     * @param domain Domain Name
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createSystemCategory(domain: string, body?: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createSystemCategory(domain: string, body?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createSystemCategory(domain: string, body?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createSystemCategory(domain: string, body?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling createSystemCategory.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/platform/domains/${encodeURIComponent(String(domain))}/system/categories`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a system message
     * Creates a system message
     * @param domain Domain Name
     * @param category System Category Name
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createSystemMessage(domain: string, category: string, body?: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createSystemMessage(domain: string, category: string, body?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createSystemMessage(domain: string, category: string, body?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createSystemMessage(domain: string, category: string, body?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling createSystemMessage.');
        }
        if (category === null || category === undefined) {
            throw new Error('Required parameter category was null or undefined when calling createSystemMessage.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/platform/domains/${encodeURIComponent(String(domain))}/system/categories/${encodeURIComponent(String(category))}/messages`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a system category
     * Deletes a system category
     * @param domain Domain Name
     * @param category System Category Name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSystemCategory(domain: string, category: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSystemCategory(domain: string, category: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSystemCategory(domain: string, category: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSystemCategory(domain: string, category: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling deleteSystemCategory.');
        }
        if (category === null || category === undefined) {
            throw new Error('Required parameter category was null or undefined when calling deleteSystemCategory.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete(`${this.basePath}/platform/domains/${encodeURIComponent(String(domain))}/system/categories/${encodeURIComponent(String(category))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes system message
     * Deletes system message
     * @param domain Domain Name
     * @param category System Category Name
     * @param locale Locale Name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSystemMessage(domain: string, category: string, locale: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSystemMessage(domain: string, category: string, locale: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSystemMessage(domain: string, category: string, locale: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSystemMessage(domain: string, category: string, locale: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling deleteSystemMessage.');
        }
        if (category === null || category === undefined) {
            throw new Error('Required parameter category was null or undefined when calling deleteSystemMessage.');
        }
        if (locale === null || locale === undefined) {
            throw new Error('Required parameter locale was null or undefined when calling deleteSystemMessage.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete(`${this.basePath}/platform/domains/${encodeURIComponent(String(domain))}/system/categories/${encodeURIComponent(String(category))}/messages/${encodeURIComponent(String(locale))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves system categories list
     * Retrieves system categories list
     * @param domain Domain Name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSystemCategories(domain: string, observe?: 'body', reportProgress?: boolean): Observable<SystemCategoriesList>;
    public getSystemCategories(domain: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SystemCategoriesList>>;
    public getSystemCategories(domain: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SystemCategoriesList>>;
    public getSystemCategories(domain: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling getSystemCategories.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/platform/domains/${encodeURIComponent(String(domain))}/system/categories`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a system category
     * Retrieves a system category
     * @param domain Domain Name
     * @param category System Category Name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSystemCategory(domain: string, category: string, observe?: 'body', reportProgress?: boolean): Observable<SystemCategory>;
    public getSystemCategory(domain: string, category: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SystemCategory>>;
    public getSystemCategory(domain: string, category: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SystemCategory>>;
    public getSystemCategory(domain: string, category: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling getSystemCategory.');
        }
        if (category === null || category === undefined) {
            throw new Error('Required parameter category was null or undefined when calling getSystemCategory.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/platform/domains/${encodeURIComponent(String(domain))}/system/categories/${encodeURIComponent(String(category))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves system message
     * Retrieves system message
     * @param domain Domain Name
     * @param category System Category Name
     * @param locale Locale Name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSystemMessage(domain: string, category: string, locale: string, observe?: 'body', reportProgress?: boolean): Observable<SystemMessagesList>;
    public getSystemMessage(domain: string, category: string, locale: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SystemMessagesList>>;
    public getSystemMessage(domain: string, category: string, locale: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SystemMessagesList>>;
    public getSystemMessage(domain: string, category: string, locale: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling getSystemMessage.');
        }
        if (category === null || category === undefined) {
            throw new Error('Required parameter category was null or undefined when calling getSystemMessage.');
        }
        if (locale === null || locale === undefined) {
            throw new Error('Required parameter locale was null or undefined when calling getSystemMessage.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/platform/domains/${encodeURIComponent(String(domain))}/system/categories/${encodeURIComponent(String(category))}/messages/${encodeURIComponent(String(locale))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves system messages
     * Retrieves system messages
     * @param domain Domain Name
     * @param category System Category Name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSystemMessages(domain: string, category: string, observe?: 'body', reportProgress?: boolean): Observable<SystemMessagesList>;
    public getSystemMessages(domain: string, category: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SystemMessagesList>>;
    public getSystemMessages(domain: string, category: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SystemMessagesList>>;
    public getSystemMessages(domain: string, category: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling getSystemMessages.');
        }
        if (category === null || category === undefined) {
            throw new Error('Required parameter category was null or undefined when calling getSystemMessages.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/platform/domains/${encodeURIComponent(String(domain))}/system/categories/${encodeURIComponent(String(category))}/messages`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a system message
     * Updates a system message
     * @param domain Domain Name
     * @param category System Category Name
     * @param locale Locale Name
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSystemMessage(domain: string, category: string, locale: string, body?: SystemMessageUpdate, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateSystemMessage(domain: string, category: string, locale: string, body?: SystemMessageUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateSystemMessage(domain: string, category: string, locale: string, body?: SystemMessageUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateSystemMessage(domain: string, category: string, locale: string, body?: SystemMessageUpdate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling updateSystemMessage.');
        }
        if (category === null || category === undefined) {
            throw new Error('Required parameter category was null or undefined when calling updateSystemMessage.');
        }
        if (locale === null || locale === undefined) {
            throw new Error('Required parameter locale was null or undefined when calling updateSystemMessage.');
        }

        let headers = this.defaultHeaders;

        // authentication (vipera_basic) required
        // authentication (vipera_cookie) required
        // authentication (vipera_oauth2) required
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put(`${this.basePath}/platform/domains/${encodeURIComponent(String(domain))}/system/categories/${encodeURIComponent(String(category))}/messages/${encodeURIComponent(String(locale))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}